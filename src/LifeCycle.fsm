header {
    namespace hc {
        class Application;
    }

    typedef hc::Application Application;
    typedef char const* const_cstr;
}

cpp {
    #include "Application.h"
}

fsm LifeCycle {
    class Application as ctx;

    Start {
        loadCore(const_cstr path) => ConsoleLoaded {
            if (!ctx.loadCore(path)) {
                forbid;
            }
        }

        quit() => Quit {
            if (!ctx.quit()) {
                forbid;
            }
        }
    }

    Quit {}

    ConsoleLoaded {
        unloadCore() => Start {
            ctx.unloadCore();
        }

        loadGame(const_cstr path) => GameLoaded {
            if (!ctx.loadGame(path)) {
                forbid;
            }
        }

        quit() => unloadCore() => quit();
    }

    GameLoaded {
        startGame() => GameRunning {
            if (!ctx.startGame()) {
                forbid;
            }
        }

        unloadGame() => ConsoleLoaded {
            if (!ctx.unloadGame()) {
                forbid;
            }
        }

        quit() => unloadGame() => quit();
    }

    GamePaused {
        resumeGame() => GameRunning {
            if (!ctx.resumeGame()) {
                forbid;
            }
        }

        resetGame() => GamePaused {
            if (!ctx.resetGame()) {
                forbid;
            }
        }

        step() => GamePaused  {
            ctx.step();
        }

        unloadGame() => ConsoleLoaded {
            if (!ctx.unloadGame()) {
                forbid;
            }
        }

        quit() => unloadGame() => quit();
    }

    GameRunning {
        pauseGame() => GamePaused {
            if (!ctx.pauseGame()) {
                forbid;
            }
        }

        resetGame() => GameRunning {
            ctx.resetGame();
        }

        unloadGame() => ConsoleLoaded {
            if (!ctx.unloadGame()) {
                forbid;
            }
        }

        quit() => unloadGame() => quit();
    }
}
